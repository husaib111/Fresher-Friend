# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
# image: node:alpine
# services:
#   - postgres:latest

stages:
  - build
#  - test
  - deploy

build-server-job:
  stage: build
  script:
    - echo "Compiling the server code..."
    - cd server
    #    - npm --version
    - echo "Done"
build-client-job: # This job runs in the build stage, which runs first.
  stage: build
  script:
    - echo "Compiling the client code..."
    - cd client
    - npm --version
    - npm install
    - npm run build
    - echo "Compile complete."
#unit-test-job: # This job runs in the test stage.
#  stage: test # It only starts when the job in the build stage completes successfully.
#  script:
#    - echo "Unit tests would go here..."
#lint-test-job: # This job also runs in the test stage.
#  stage: test # It can run at the same time as unit-test-job (in parallel).
#  script:
#    - echo "Linting code... This will take about 10 seconds."
#    - sleep 10
#    - echo "No lint issues found."
before_script:
  - apt-get update -qq
  - apt-get install -qq git
  # Setup SSH deploy keys
  - "which ssh-agent || ( apt-get install -qq openssh-client )"
  - eval $(ssh-agent -s)
  - ssh-add <(echo "$SSH_PRIVATE_KEY")
  - mkdir -p ~/.ssh
  - apt-get install nodejs -y
  - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'

deploy-job: # This job runs in the deploy stage.
  stage: deploy # It only runs when *both* jobs in the test stage complete successfully.
  environment:
    name: production
    url: http://46.101.81.7/
  script:
    - ./server/deploy/deploy.sh
